// http://www.html5rocks.com/en/tutorials/async/deferred/
// http://www.html5rocks.com/en/tutorials/es6/promises/
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
// http://www.slideshare.net/async_io/javascript-promisesq-library-17206726
web-slide.genius
	h1 Promises
	h2 <i>A promise made is a debt unpaid.</i>

web-slide(class="align-left genius")
	h1 Promises - Callback Hellss
	pre(is="lang-javascript", style="margin-top:-15px").
		function readdir(source) {
		  fs.readdir(source, function(err, files) {
		    if (err) console.log('Error finding files: ' + err)
				else {
		      files.forEach(function(filename, fileIndex) {
		        console.log(source + filename);
		        if (S(filename).endsWith('.jpeg')) {
		          gm(source + filename).size(function(err, values) {
		            if (err) console.log('Error identifying file size: ' + err)
		            else {
		              console.log(filename + ' : ' + values);
		              aspect = (values.width / values.height);
		              widths.forEach(function(width, widthIndex) {
		                height = Math.round(width / aspect);
		                console.log('resizing ' + filename + 'to ' + height + 'x' + height);
		                this.resize(width, height).write(destination + 'w' + width + '_' + filename, function(err) {
		                  if (err) console.log('Error writing file: ' + err);
		                })
		              }.bind(this));
		            }});}});}});}

web-slide(class="align-left genius")
	h1 Promises
	p.
		A Promise represents a proxy for a value not necessarily known when the 
		promise is created. It allows you to associate handlers to an asynchronous 
		action's eventual success value or failure reason.
		
	pre(is="lang-javascript").
		doMyLaundry().then(clothes => {
			clothes.forEeach(piece => console.log('I washed a ' + piece));
		});
		
		// you can chain promises
		doMyLaundry().then(laundry => {
			return putOutToDry(laundry);
		}).then(ironShirts).then(foldSocks).then(putAway);

web-slide(class="align-left genius")
	h1 Promises
	p.
		Although promise implementations follow a standardised behaviour, their 
		overall APIs differ. JavaScript promises are similar in API to RSVP.js. 
		Here's how you create a promise:
	pre(is="lang-javascript").
		var later = new Promise((resolve, reject) => {
			if (/* everything worked */)
				resolve("Stuff worked");
			else 
				reject(Error("Everything is failing!"));
		});
		
		// Promise.prototype.then(onFulfilled, onRejected)
		later.then(
			s => console.log('I was resolved'),
			s => console.log('I was rejected'));
